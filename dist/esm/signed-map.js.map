{"version":3,"sources":["../../src/signed-map.js"],"names":["SignedObservedRemoveMap","parser","jsonStreamParser","CID","streamArray","jsonStreamArray","PQueue","LruCache","debounce","Readable","SerializeTransform","DeserializeTransform","require","notSubscribedRegex","IpfsSignedObservedRemoveMap","constructor","db","ipfs","topic","entries","options","Error","chunkPubSub","abortController","AbortController","active","disableSync","boundHandleQueueMessage","handleQueueMessage","bind","boundHandleHashMessage","handleHashMessage","readyPromise","then","initIpfs","syncCache","peersCache","max","maxAge","hasNewPeers","on","ipfsHash","debouncedIpfsSync","ipfsSync","serializeTransform","autoDestroy","maxChunkSize","messageSlice","pubsub","publish","signal","error","type","emit","deserializeTransform","timeout","message","queue","JSON","parse","toString","processSigned","hashLoadQueue","id","ipfsId","Buffer","from","stringify","write","subscribe","discover","waitForPeersThenSendHash","peerIds","peers","length","Promise","resolve","setTimeout","removeEventListener","handleAbort","clearTimeout","addEventListener","queueMicrotask","code","name","hash","getIpfsHash","has","set","data","dump","file","add","wrapWithDirectory","recursive","pin","cid","ipfsPeerCount","shutdown","unsubscribeAbortController","abort","unsubscribe","test","onIdle","destroy","remoteHash","loadIpfsHash","stream","cat","pipeline","pipe","arrayDepth","streamState","insertions","deletions","value","push","i","d","reject","signedProcessQueue"],"mappings":"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","sourcesContent":["// @flow\n\nimport { SignedObservedRemoveMap } from 'observed-remove-level';\nimport { parser as jsonStreamParser } from 'stream-json/Parser';\nimport CID from 'cids';\n\nimport { streamArray as jsonStreamArray } from 'stream-json/streamers/StreamArray';\nimport PQueue from 'p-queue';\nimport LruCache from 'lru-cache';\nimport debounce from 'lodash/debounce';\nimport { Readable } from 'stream';\n\nconst { SerializeTransform, DeserializeTransform } = require('@bunchtogether/chunked-stream-transformers');\n\ntype Options = {\n  maxAge?:number,\n  bufferPublishing?:number,\n  namespace?: string,\n  key: any,\n  format?: string,\n  disableSync?: boolean,\n  chunkPubSub?: boolean\n};\n\nconst notSubscribedRegex = /Not subscribed/;\n\nexport default class IpfsSignedObservedRemoveMap<V> extends SignedObservedRemoveMap<V> { // eslint-disable-line no-unused-vars\n  /**\n   * Create an observed-remove CRDT.\n   * @param {Object} [ipfs] Object implementing the [core IPFS API](https://github.com/ipfs/interface-ipfs-core#api), most likely a [js-ipfs](https://github.com/ipfs/js-ipfs) or [ipfs-http-client](https://github.com/ipfs/js-ipfs-http-client) object.\n   * @param {String} [topic] IPFS pubub topic to use in synchronizing the CRDT.\n   * @param {Iterable<V>} [entries=[]] Iterable of initial values\n   * @param {Object} [options={}]\n   * @param {String} [options.maxAge=5000] Max age of insertion/deletion identifiers\n   * @param {String} [options.bufferPublishing=20] Interval by which to buffer 'publish' events\n   * @param {boolean} [options.chunkPubSub=false] Chunk pubsub messages for values greater than 1 MB\n   */\n  constructor(db:Object, ipfs:Object, topic:string, entries?: Iterable<[string, V, string, string]>, options?:Options = {}) {\n    super(db, entries, options);\n    if (!ipfs) {\n      throw new Error(\"Missing required argument 'ipfs'\");\n    }\n    this.chunkPubSub = !!options.chunkPubSub;\n    this.db = db;\n    this.ipfs = ipfs;\n    this.abortController = new AbortController();\n    this.topic = topic;\n    this.active = true;\n    this.disableSync = !!options.disableSync;\n    this.boundHandleQueueMessage = this.handleQueueMessage.bind(this);\n    this.boundHandleHashMessage = this.handleHashMessage.bind(this);\n    this.readyPromise = this.readyPromise.then(async () => {\n      await this.initIpfs();\n    });\n    this.syncCache = new LruCache(100);\n    this.peersCache = new LruCache({\n      max: 100,\n      maxAge: 1000 * 60,\n    });\n    this.hasNewPeers = false;\n    this.on('set', () => {\n      delete this.ipfsHash;\n    });\n    this.on('delete', () => {\n      delete this.ipfsHash;\n    });\n    this.debouncedIpfsSync = debounce(this.ipfsSync.bind(this), 1000);\n    this.serializeTransform = new SerializeTransform({\n      autoDestroy: false,\n      maxChunkSize: 1024 * 512,\n    });\n    this.serializeTransform.on('data', async (messageSlice) => {\n      if (!this.active) {\n        return;\n      }\n      try {\n        await this.ipfs.pubsub.publish(this.topic, messageSlice, { signal: this.abortController.signal });\n      } catch (error) {\n        if (error.type !== 'aborted' && this.active) {\n          this.emit('error', error);\n        }\n      }\n    });\n    this.serializeTransform.on('error', (error) => {\n      this.emit('error', error);\n    });\n    this.deserializeTransform = new DeserializeTransform({\n      autoDestroy: false,\n      timeout: 10000,\n    });\n    this.deserializeTransform.on('error', (error) => {\n      this.emit('error', error);\n    });\n    this.deserializeTransform.on('data', async (message) => {\n      try {\n        const queue = JSON.parse(message.toString('utf8'));\n        await this.processSigned(queue);\n      } catch (error) {\n        this.emit('error', error);\n      }\n    });\n    this.hashLoadQueue = new PQueue({});\n    this.hashLoadQueue.on('idle', async () => {\n      if (this.hasNewPeers && this.active) {\n        this.debouncedIpfsSync();\n      }\n      this.emit('hashesloaded');\n    });\n  }\n\n  /**\n   * Resolves when IPFS topic subscriptions are confirmed.\n   *\n   * @name IpfsObservedRemoveSet#readyPromise\n   * @type {Promise<void>}\n   * @readonly\n   */\n\n  declare ipfs: Object;\n  declare topic: string;\n  declare readyPromise: Promise<void>;\n  declare active: boolean;\n  declare ipfsId: string;\n  declare disableSync: boolean;\n  declare boundHandleQueueMessage: (message:{from:string, data:Buffer}) => Promise<void>;\n  declare boundHandleHashMessage: (message:{from:string, data:Buffer}) => Promise<void>;\n  declare db: Object;\n  declare ipfsHash: string | void;\n  declare syncCache: LruCache;\n  declare peersCache: LruCache;\n  declare hasNewPeers: boolean;\n  declare debouncedIpfsSync: () => Promise<void>;\n  declare abortController: AbortController;\n  declare chunkPubSub: boolean;\n  declare serializeTransform: SerializeTransform;\n  declare deserializeTransform: DeserializeTransform;\n  declare hashLoadQueue: PQueue;\n\n  async initIpfs() {\n    try {\n      const { id } = await this.ipfs.id({ signal: this.abortController.signal });\n      this.ipfsId = id;\n    } catch (error) {\n      if (error.type !== 'aborted' && this.active) {\n        throw error;\n      }\n      return;\n    }\n    this.on('publish', async (queue) => {\n      if (!this.active) {\n        return;\n      }\n      if (this.chunkPubSub) {\n        const message = Buffer.from(JSON.stringify(queue));\n        this.serializeTransform.write(message);\n      } else {\n        try {\n          const message = Buffer.from(JSON.stringify(queue));\n          await this.ipfs.pubsub.publish(this.topic, message, { signal: this.abortController.signal });\n        } catch (error) {\n          if (error.type !== 'aborted' && this.active) {\n            this.emit('error', error);\n          }\n        }\n      }\n    });\n    try {\n      await this.ipfs.pubsub.subscribe(this.topic, this.boundHandleQueueMessage, { discover: true, signal: this.abortController.signal });\n      if (!this.disableSync) {\n        await this.ipfs.pubsub.subscribe(`${this.topic}:hash`, this.boundHandleHashMessage, { discover: true, signal: this.abortController.signal });\n        this.waitForPeersThenSendHash();\n      }\n    } catch (error) {\n      if (error.type !== 'aborted' && this.active) {\n        throw error;\n      }\n    }\n  }\n\n  async waitForPeersThenSendHash():Promise<void> {\n    if (!this.active) {\n      return;\n    }\n    try {\n      const peerIds = await this.ipfs.pubsub.peers(this.topic, { timeout: 10000, signal: this.abortController.signal });\n      if (peerIds.length > 0) {\n        this.debouncedIpfsSync();\n      } else {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.abortController.signal.removeEventListener('abort', handleAbort);\n            resolve();\n          }, 10000);\n          const handleAbort = () => {\n            clearTimeout(timeout);\n            this.abortController.signal.removeEventListener('abort', handleAbort);\n            resolve();\n          };\n          this.abortController.signal.addEventListener('abort', handleAbort);\n        });\n        queueMicrotask(() => {\n          this.waitForPeersThenSendHash();\n        });\n      }\n    } catch (error) {\n      // IPFS connection is closed or timed out, don't send join\n      if (error.type !== 'aborted' && error.code !== 'ECONNREFUSED' && error.name !== 'TimeoutError') {\n        this.emit('error', error);\n      }\n      if (this.active && error.name === 'TimeoutError') {\n        queueMicrotask(() => {\n          this.waitForPeersThenSendHash();\n        });\n      }\n    }\n  }\n\n  /**\n   * Publish an IPFS hash of an array containing all of the object's insertions and deletions.\n   * @return {Array<Array<any>>}\n   */\n  async ipfsSync() {\n    if (!this.active) {\n      return;\n    }\n    try {\n      const hash = await this.getIpfsHash();\n      if (!this.active) {\n        return;\n      }\n      if (!this.syncCache.has(hash, true) || this.hasNewPeers) {\n        this.syncCache.set(hash, true);\n        await this.ipfs.pubsub.publish(`${this.topic}:hash`, Buffer.from(hash, 'utf8'), { signal: this.abortController.signal });\n        this.emit('hash', hash);\n      }\n      this.hasNewPeers = false;\n    } catch (error) {\n      if (error.type !== 'aborted' && this.active) {\n        this.emit('error', error);\n      }\n    }\n  }\n\n\n  /**\n   * Stores and returns an IPFS hash of the current insertions and deletions\n   * @return {Promise<string>}\n   */\n  async getIpfsHash():Promise<string> {\n    if (this.ipfsHash) {\n      return this.ipfsHash;\n    }\n    const data = await this.dump();\n    const file = await this.ipfs.add(Buffer.from(JSON.stringify(data)), { wrapWithDirectory: false, recursive: false, pin: false, signal: this.abortController.signal });\n    this.ipfsHash = file.cid.toString();\n    return this.ipfsHash;\n  }\n\n  /**\n   * Current number of IPFS pubsub peers.\n   * @return {number}\n   */\n  async ipfsPeerCount():Promise<number> {\n    const peerIds = await this.ipfs.pubsub.peers(this.topic, { signal: this.abortController.signal });\n    return peerIds.length;\n  }\n\n  /**\n   * Gracefully shutdown\n   * @return {void}\n   */\n  async shutdown(): Promise<void> {\n    this.active = false;\n    // Catch exceptions here as pubsub is sometimes closed by process kill signals.\n    if (this.ipfsId) {\n      try {\n        const unsubscribeAbortController = new AbortController();\n        const timeout = setTimeout(() => {\n          unsubscribeAbortController.abort();\n        }, 5000);\n        await this.ipfs.pubsub.unsubscribe(this.topic, this.boundHandleQueueMessage, { signal: unsubscribeAbortController.signal });\n        if (!this.disableSync) {\n          await this.ipfs.pubsub.unsubscribe(`${this.topic}:hash`, this.boundHandleHashMessage, { signal: unsubscribeAbortController.signal });\n        }\n        clearTimeout(timeout);\n      } catch (error) {\n        if (!notSubscribedRegex.test(error.message)) {\n          this.abortController.abort();\n          this.abortController = new AbortController();\n          throw error;\n        }\n      }\n    }\n    await this.hashLoadQueue.onIdle();\n    this.abortController.abort();\n    this.abortController = new AbortController();\n    await this.deserializeTransform.onIdle();\n    this.serializeTransform.destroy();\n    this.deserializeTransform.destroy();\n    await super.shutdown();\n  }\n\n  async handleQueueMessage(message:{from:string, data:Buffer}) {\n    if (message.from === this.ipfsId) {\n      return;\n    }\n    if (!this.active) {\n      return;\n    }\n    if (this.chunkPubSub) {\n      this.deserializeTransform.write(message.data);\n    } else {\n      try {\n        const queue = JSON.parse(Buffer.from(message.data).toString('utf8'));\n        await this.processSigned(queue);\n      } catch (error) {\n        this.emit('error', error);\n      }\n    }\n  }\n\n  handleHashMessage(message:{from:string, data:Buffer}) {\n    if (!this.active) {\n      return;\n    }\n    if (message.from === this.ipfsId) {\n      return;\n    }\n    if (!this.peersCache.has(message.from)) {\n      this.hasNewPeers = true;\n      this.peersCache.set(message.from, true);\n    }\n    const remoteHash = Buffer.from(message.data).toString('utf8');\n    if (this.syncCache.has(remoteHash)) {\n      return;\n    }\n    this.syncCache.set(remoteHash, true);\n    try {\n      this.hashLoadQueue.add(() => this.loadIpfsHash(remoteHash));\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  async loadIpfsHash(hash:string) {\n    // $FlowFixMe\n    const stream = Readable.from(this.ipfs.cat(new CID(hash), { timeout: 30000, signal: this.abortController.signal }));\n    const parser = jsonStreamParser();\n    const streamArray = jsonStreamArray();\n    const pipeline = stream.pipe(parser);\n    let arrayDepth = 0;\n    let streamState = 0;\n    let insertions = [];\n    let deletions = [];\n    streamArray.on('data', ({ value }) => {\n      if (streamState === 1) {\n        insertions.push(value);\n      } else if (streamState === 3) {\n        deletions.push(value);\n      }\n      if (insertions.length + deletions.length < 1000) {\n        return;\n      }\n      const i = insertions;\n      const d = deletions;\n      insertions = [];\n      deletions = [];\n      this.processSigned([i, d], true);\n    });\n    try {\n      await new Promise((resolve, reject) => {\n        stream.on('error', (error) => {\n          reject(error);\n        });\n        streamArray.on('error', (error) => {\n          reject(error);\n        });\n        pipeline.on('error', (error) => {\n          reject(error);\n        });\n        pipeline.on('end', () => {\n          resolve();\n        });\n        pipeline.on('data', (data) => {\n          const { name } = data;\n          if (name === 'startArray') {\n            arrayDepth += 1;\n            if (arrayDepth === 2) {\n              streamState += 1;\n            }\n          }\n          if (streamState === 1 || streamState === 3) {\n            streamArray.write(data);\n          }\n          if (name === 'endArray') {\n            if (arrayDepth === 2) {\n              streamState += 1;\n            }\n            arrayDepth -= 1;\n          }\n        });\n      });\n    } catch (error) {\n      if (error.type !== 'aborted' && this.active) {\n        this.emit('error', error);\n      }\n      return;\n    }\n    stream.destroy();\n    this.processSigned([insertions, deletions]);\n    await this.signedProcessQueue.onIdle();\n  }\n}\n"],"file":"signed-map.js"}