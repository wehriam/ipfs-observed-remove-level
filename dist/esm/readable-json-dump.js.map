{"version":3,"sources":["../../src/readable-json-dump.js"],"names":["Readable","hash32","OPEN_BUFFER","Buffer","from","MID_BUFFER","CLOSE_BUFFER","COMMA_BUFFER","ReadableJsonDump","constructor","db","namespace","options","push","insertionIterator","iterator","gt","lt","keyAsBuffer","valueAsBuffer","deletionIterator","didWritePairs","didWriteDeletions","isReading","skipInsertionComma","skipDeletionComma","namespaceLength","length","buckets","bucket","getInsertionPair","Promise","resolve","next","error","k","v","process","nextTick","emit","undefined","getDeletionPair","readFromLevelDbIterators","key","pair","buffer","concat","slice","shouldKeepPushing","reject","end","id","slicedId","_read"],"mappings":"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","sourcesContent":["// @flow\n\nimport { Readable } from 'stream';\nimport { hash32 } from 'farmhash';\n\nconst OPEN_BUFFER = Buffer.from('[\"');\nconst MID_BUFFER = Buffer.from('\",');\nconst CLOSE_BUFFER = Buffer.from(']');\nconst COMMA_BUFFER = Buffer.from(',');\n\ntype LevelDBIterator = {next: ((Error | void, Buffer | void, Buffer | void) => void) => void, end: ((Error | void) => void) => void};\n\nexport default class ReadableJsonDump extends Readable {\n  constructor(db:Object, namespace: string, options?:Object) {\n    super(options);\n    this.push(Buffer.from('[['));\n    this.insertionIterator = db.iterator({\n      gt: Buffer.from(`${namespace}>`),\n      lt: Buffer.from(`${namespace}?`),\n      keyAsBuffer: true,\n      valueAsBuffer: true,\n    });\n    this.deletionIterator = db.iterator({\n      gt: Buffer.from(`${namespace}<`),\n      lt: Buffer.from(`${namespace}=`),\n      keyAsBuffer: true,\n      valueAsBuffer: true,\n    });\n    this.didWritePairs = false;\n    this.didWriteDeletions = false;\n    this.isReading = false;\n    this.skipInsertionComma = true;\n    this.skipDeletionComma = true;\n    this.namespaceLength = Buffer.from(`${namespace}>`).length;\n    this.buckets = (options && options.buckets) || 1;\n    this.bucket = (options && options.bucket) || 0;\n  }\n\n  declare namespaceLength: number;\n  declare insertionIterator: LevelDBIterator;\n  declare deletionIterator: LevelDBIterator;\n  declare didWritePairs: boolean;\n  declare didWriteDeletions: boolean;\n  declare skipInsertionComma: boolean;\n  declare skipDeletionComma: boolean;\n  declare isReading: boolean;\n  declare buckets: number;\n  declare bucket: number;\n\n  getInsertionPair():Promise<[Buffer | void, Buffer | void]> {\n    return new Promise((resolve) => {\n      this.insertionIterator.next((error:Error | void, k: Buffer | void, v: Buffer | void) => {\n        if (error) {\n          this.didWritePairs = true;\n          this.didWriteDeletions = true;\n          process.nextTick(() => this.emit('error', error));\n          resolve([undefined, undefined]);\n        } else {\n          resolve([k, v]);\n        }\n      });\n    });\n  }\n\n  getDeletionPair():Promise<[Buffer | void, Buffer | void]> {\n    return new Promise((resolve) => {\n      this.deletionIterator.next((error:Error | void, k: Buffer | void, v: Buffer | void) => {\n        if (error) {\n          this.didWritePairs = true;\n          this.didWriteDeletions = true;\n          process.nextTick(() => this.emit('error', error));\n          resolve([undefined, undefined]);\n        } else {\n          resolve([k, v]);\n        }\n      });\n    });\n  }\n\n  async readFromLevelDbIterators() {\n    if (this.isReading) {\n      return;\n    }\n    this.isReading = true;\n    if (!this.didWritePairs) {\n      while (true) {\n        const [key, pair] = await this.getInsertionPair();\n        if (key && pair) {\n          if (this.buckets > 1) {\n            const bucket = hash32(key) % this.buckets;\n            if (bucket !== this.bucket) {\n              continue;\n            }\n          }\n          let buffer;\n          if (this.skipInsertionComma) {\n            this.skipInsertionComma = false;\n            buffer = Buffer.concat([OPEN_BUFFER, key.slice(this.namespaceLength), MID_BUFFER, pair, CLOSE_BUFFER]);\n          } else {\n            buffer = Buffer.concat([COMMA_BUFFER, OPEN_BUFFER, key.slice(this.namespaceLength), MID_BUFFER, pair, CLOSE_BUFFER]);\n          }\n          const shouldKeepPushing = this.push(buffer);\n          if (!shouldKeepPushing) {\n            this.isReading = false;\n            return;\n          }\n        } else {\n          break;\n        }\n      }\n      this.push(Buffer.from('],['));\n      this.didWritePairs = true;\n      await new Promise((resolve, reject) => {\n        this.insertionIterator.end((error:Error | void) => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n    if (!this.didWriteDeletions) {\n      while (true) {\n        const [id, key] = await this.getDeletionPair();\n        if (id && key) {\n          if (this.buckets > 1) {\n            const bucket = hash32(key) % this.buckets;\n            if (bucket !== this.bucket) {\n              continue;\n            }\n          }\n          const slicedId = id.slice(this.namespaceLength);\n          let buffer;\n          if (this.skipDeletionComma) {\n            this.skipDeletionComma = false;\n            buffer = Buffer.concat([OPEN_BUFFER, slicedId, MID_BUFFER, key, CLOSE_BUFFER]);\n          } else {\n            buffer = Buffer.concat([COMMA_BUFFER, OPEN_BUFFER, slicedId, MID_BUFFER, key, CLOSE_BUFFER]);\n          }\n          const shouldKeepPushing = this.push(buffer);\n          if (!shouldKeepPushing) {\n            this.isReading = false;\n            return;\n          }\n        } else {\n          break;\n        }\n      }\n      this.didWriteDeletions = true;\n      await new Promise((resolve, reject) => {\n        this.deletionIterator.end((error:Error | void) => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n    this.push(Buffer.from(']]'));\n    this.push(null);\n    this.isReading = false;\n  }\n\n  _read() {\n    this.readFromLevelDbIterators();\n  }\n}\n\n"],"file":"readable-json-dump.js"}