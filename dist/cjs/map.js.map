{"version":3,"sources":["../../src/map.js"],"names":["notSubscribedRegex","OPEN_BUFFER","Buffer","from","MID_BUFFER","CLOSE_BUFFER","COMMA_BUFFER","IpfsObservedRemoveMap","ObservedRemoveMap","constructor","db","ipfs","topic","entries","options","Error","chunkPubSub","abortController","AbortController","active","disableSync","boundHandleQueueMessage","handleQueueMessage","bind","boundHandleHashMessage","handleHashMessage","readyPromise","then","initIpfs","syncCache","LruCache","peersCache","max","maxAge","hasNewPeers","on","ipfsHashes","ipfsHash","debouncedIpfsSync","ipfsSync","serializeTransform","SerializeTransform","autoDestroy","maxChunkSize","messageSlice","pubsub","publish","signal","error","type","emit","deserializeTransform","DeserializeTransform","timeout","message","queue","JSON","parse","toString","process","hashLoadQueue","PQueue","id","ipfsId","stringify","write","subscribe","waitForPeersThenSendHash","waitForPeers","peerIds","peers","aborted","length","name","Promise","resolve","setTimeout","removeEventListener","handleAbort","clearTimeout","addEventListener","queueMicrotask","code","hashes","getIpfsHashes","hash","has","set","getIpfsHash","stream","ReadableJsonDump","namespace","file","add","wrapWithDirectory","recursive","pin","cid","namespaceLength","isAdded","isFirstInsertion","isFirstDeletion","streams","Readable","read","addPromises","push","namespaceWithKey","pair","iterator","gt","lt","keyAsBuffer","valueAsBuffer","key","slice","streamId","namespaceWithId","all","map","ipfsPeerCount","shutdown","unsubscribeAbortController","abort","unsubscribe","test","onIdle","destroy","data","remoteHash","loadIpfsHash","cat","CID","parser","streamArray","pipeline","pipe","arrayDepth","streamState","insertions","deletions","value","i","d","reject","processQueue"],"mappings":"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","sourcesContent":["// @flow\n\nimport { ObservedRemoveMap } from 'observed-remove-level';\nimport { parser as jsonStreamParser } from 'stream-json/Parser';\nimport CID from 'cids';\nimport { streamArray as jsonStreamArray } from 'stream-json/streamers/StreamArray';\nimport { hash32 } from 'farmhash';\nimport PQueue from 'p-queue';\nimport LruCache from 'lru-cache';\nimport { Readable } from 'stream';\nimport debounce from 'lodash/debounce';\nimport {\n  SerializeTransform,\n  DeserializeTransform,\n} from '@bunchtogether/chunked-stream-transformers';\nimport ReadableJsonDump from './readable-json-dump';\n\n\ntype Options = {\n  maxAge?:number,\n  bufferPublishing?:number,\n  namespace?: string,\n  format?: string,\n  disableSync?: boolean,\n  chunkPubSub?: boolean\n};\n\nconst notSubscribedRegex = /Not subscribed/;\n\nconst OPEN_BUFFER = Buffer.from('[\"');\nconst MID_BUFFER = Buffer.from('\",');\nconst CLOSE_BUFFER = Buffer.from(']');\nconst COMMA_BUFFER = Buffer.from(',');\n\nexport default class IpfsObservedRemoveMap<V> extends ObservedRemoveMap<V> { // eslint-disable-line no-unused-vars\n  /**\n   * Create an observed-remove CRDT.\n   * @param {Object} [ipfs] Object implementing the [core IPFS API](https://github.com/ipfs/interface-ipfs-core#api), most likely a [js-ipfs](https://github.com/ipfs/js-ipfs) or [ipfs-http-client](https://github.com/ipfs/js-ipfs-http-client) object.\n   * @param {String} [topic] IPFS pubub topic to use in synchronizing the CRDT.\n   * @param {Iterable<V>} [entries=[]] Iterable of initial values\n   * @param {Object} [options={}]\n   * @param {String} [options.maxAge=5000] Max age of insertion/deletion identifiers\n   * @param {String} [options.bufferPublishing=20] Interval by which to buffer 'publish' events\n   * @param {boolean} [options.chunkPubSub=false] Chunk pubsub messages for values greater than 1 MB\n   */\n  constructor(db:Object, ipfs:Object, topic:string, entries?: Iterable<[string, V]>, options?:Options = {}) {\n    super(db, entries, options);\n    if (!ipfs) {\n      throw new Error(\"Missing required argument 'ipfs'\");\n    }\n    this.chunkPubSub = !!options.chunkPubSub;\n    this.db = db;\n    this.ipfs = ipfs;\n    this.abortController = new AbortController();\n    this.topic = topic;\n    this.active = true;\n    this.disableSync = !!options.disableSync;\n    this.boundHandleQueueMessage = this.handleQueueMessage.bind(this);\n    this.boundHandleHashMessage = this.handleHashMessage.bind(this);\n    this.readyPromise = this.readyPromise.then(async () => {\n      await this.initIpfs();\n    });\n    this.syncCache = new LruCache(100);\n    this.peersCache = new LruCache({\n      max: 100,\n      maxAge: 1000 * 60 * 60,\n    });\n    this.hasNewPeers = false;\n    this.on('set', () => {\n      delete this.ipfsHashes;\n      delete this.ipfsHash;\n    });\n    this.on('delete', () => {\n      delete this.ipfsHashes;\n      delete this.ipfsHash;\n    });\n    this.debouncedIpfsSync = debounce(this.ipfsSync.bind(this), 1000);\n    this.serializeTransform = new SerializeTransform({\n      autoDestroy: false,\n      maxChunkSize: 1024 * 512,\n    });\n    this.serializeTransform.on('data', async (messageSlice) => {\n      if (!this.active) {\n        return;\n      }\n      try {\n        await this.ipfs.pubsub.publish(this.topic, messageSlice, { signal: this.abortController.signal });\n      } catch (error) {\n        if (error.type !== 'aborted') {\n          this.emit('error', error);\n        }\n      }\n    });\n    this.serializeTransform.on('error', (error) => {\n      this.emit('error', error);\n    });\n    this.deserializeTransform = new DeserializeTransform({\n      autoDestroy: false,\n      timeout: 10000,\n    });\n    this.deserializeTransform.on('error', (error) => {\n      this.emit('error', error);\n    });\n    this.deserializeTransform.on('data', async (message) => {\n      try {\n        const queue = JSON.parse(message.toString('utf8'));\n        await this.process(queue);\n      } catch (error) {\n        this.emit('error', error);\n      }\n    });\n    this.hashLoadQueue = new PQueue({});\n    this.hashLoadQueue.on('idle', async () => {\n      if (this.hasNewPeers && this.active) {\n        this.debouncedIpfsSync();\n      }\n      this.emit('hashesloaded');\n    });\n  }\n\n  /**\n   * Resolves when IPFS topic subscriptions are confirmed.\n   *\n   * @name IpfsObservedRemoveSet#readyPromise\n   * @type {Promise<void>}\n   * @readonly\n   */\n\n  declare ipfs: Object;\n  declare topic: string;\n  declare readyPromise: Promise<void>;\n  declare active: boolean;\n  declare ipfsId: string;\n  declare disableSync: boolean;\n  declare boundHandleQueueMessage: (message:{from:string, data:Buffer}) => Promise<void>;\n  declare boundHandleHashMessage: (message:{from:string, data:Buffer}) => Promise<void>;\n  declare db: Object;\n  declare ipfsHashes: Array<string> | void;\n  declare ipfsHash: string | void;\n  declare syncCache: LruCache;\n  declare peersCache: LruCache;\n  declare hasNewPeers: boolean;\n  declare debouncedIpfsSync: () => Promise<void>;\n  declare abortController: AbortController;\n  declare chunkPubSub: boolean;\n  declare serializeTransform: SerializeTransform;\n  declare deserializeTransform: DeserializeTransform;\n  declare hashLoadQueue: PQueue;\n\n  async initIpfs() {\n    try {\n      const { id } = await this.ipfs.id({ signal: this.abortController.signal });\n      this.ipfsId = id;\n    } catch (error) {\n      if (error.type !== 'aborted') {\n        throw error;\n      }\n      return;\n    }\n    this.on('publish', async (queue) => {\n      if (!this.active) {\n        return;\n      }\n      if (this.chunkPubSub) {\n        const message = Buffer.from(JSON.stringify(queue));\n        this.serializeTransform.write(message);\n      } else {\n        try {\n          const message = Buffer.from(JSON.stringify(queue));\n          await this.ipfs.pubsub.publish(this.topic, message, { signal: this.abortController.signal });\n        } catch (error) {\n          if (error.type !== 'aborted') {\n            this.emit('error', error);\n          }\n        }\n      }\n    });\n    try {\n      await this.ipfs.pubsub.subscribe(this.topic, this.boundHandleQueueMessage, { signal: this.abortController.signal });\n      if (!this.disableSync) {\n        await this.ipfs.pubsub.subscribe(`${this.topic}:hash`, this.boundHandleHashMessage, { signal: this.abortController.signal });\n        this.waitForPeersThenSendHash();\n      }\n    } catch (error) {\n      if (error.type !== 'aborted') {\n        throw error;\n      }\n    }\n  }\n\n  async waitForPeers():Promise<void> {\n    while (true) {\n      try {\n        const peerIds = await this.ipfs.pubsub.peers(this.topic, { timeout: 10000, signal: this.abortController.signal });\n        if (this.abortController.signal.aborted) {\n          return;\n        }\n        if (peerIds.length > 0) {\n          break;\n        }\n      } catch (error) {\n        if (error.name === 'TimeoutError') {\n          continue;\n        }\n        throw error;\n      }\n    }\n    while (true) {\n      try {\n        const peerIds = await this.ipfs.pubsub.peers(`${this.topic}:hash`, { timeout: 10000, signal: this.abortController.signal });\n        if (this.abortController.signal.aborted) {\n          return;\n        }\n        if (peerIds.length > 0) {\n          break;\n        }\n      } catch (error) {\n        if (error.name === 'TimeoutError') {\n          continue;\n        }\n        throw error;\n      }\n    }\n  }\n\n  async waitForPeersThenSendHash():Promise<void> {\n    if (!this.active) {\n      return;\n    }\n    try {\n      const peerIds = await this.ipfs.pubsub.peers(this.topic, { timeout: 10000, signal: this.abortController.signal });\n      if (this.abortController.signal.aborted) {\n        return;\n      }\n      if (peerIds.length > 0) {\n        this.debouncedIpfsSync();\n      } else {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.abortController.signal.removeEventListener('abort', handleAbort);\n            resolve();\n          }, 10000);\n          const handleAbort = () => {\n            clearTimeout(timeout);\n            this.abortController.signal.removeEventListener('abort', handleAbort);\n            resolve();\n          };\n          this.abortController.signal.addEventListener('abort', handleAbort);\n        });\n        queueMicrotask(() => {\n          this.waitForPeersThenSendHash();\n        });\n      }\n    } catch (error) {\n      // IPFS connection is closed or timed out, don't send join\n      if (error.type !== 'aborted' && error.code !== 'ECONNREFUSED' && error.name !== 'TimeoutError') {\n        this.emit('error', error);\n      }\n      if (this.active && error.name === 'TimeoutError') {\n        queueMicrotask(() => {\n          this.waitForPeersThenSendHash();\n        });\n      }\n    }\n  }\n\n  /**\n   * Publish an IPFS hash of an array containing all of the object's insertions and deletions.\n   * @return {Array<Array<any>>}\n   */\n  async ipfsSync() {\n    if (!this.active) {\n      return;\n    }\n    try {\n      const hashes = await this.getIpfsHashes();\n      for (const hash of hashes) {\n        if (!this.active) {\n          return;\n        }\n        if (!this.syncCache.has(hash) || this.hasNewPeers) {\n          this.syncCache.set(hash, true);\n          await this.ipfs.pubsub.publish(`${this.topic}:hash`, Buffer.from(hash, 'utf8'), { signal: this.abortController.signal });\n          this.emit('hash', hash);\n        }\n      }\n      this.hasNewPeers = false;\n    } catch (error) {\n      if (error.type !== 'aborted') {\n        this.emit('error', error);\n      }\n    }\n  }\n\n  /**\n   * Stores and returns an IPFS hash of the current insertions and deletions\n   * @return {Promise<string>}\n   */\n  async getIpfsHash():Promise<string> {\n    if (this.ipfsHash) {\n      return this.ipfsHash;\n    }\n    const stream = new ReadableJsonDump(this.db.db.db, this.namespace);\n    const file = await this.ipfs.add(stream, { wrapWithDirectory: false, recursive: false, pin: false, signal: this.abortController.signal });\n    this.ipfsHash = file.cid.toString();\n    return this.ipfsHash;\n  }\n\n  /**\n   * Stores and returns an IPFS hash of the current insertions and deletions\n   * @return {Promise<string>}\n   */\n  async getIpfsHashes():Promise<Array<string>> {\n    if (this.ipfsHashes) {\n      return this.ipfsHashes;\n    }\n    const namespaceLength = Buffer.from(`${this.namespace}>`).length;\n    const isAdded = [\n      false,\n      false,\n      false,\n      false,\n      false,\n      false,\n      false,\n      false,\n    ];\n    const isFirstInsertion = [\n      true,\n      true,\n      true,\n      true,\n      true,\n      true,\n      true,\n      true,\n    ];\n    const isFirstDeletion = [\n      true,\n      true,\n      true,\n      true,\n      true,\n      true,\n      true,\n      true,\n    ];\n    const streams = [\n      new Readable({ read() {}, signal: this.abortController.signal }),\n      new Readable({ read() {}, signal: this.abortController.signal }),\n      new Readable({ read() {}, signal: this.abortController.signal }),\n      new Readable({ read() {}, signal: this.abortController.signal }),\n      new Readable({ read() {}, signal: this.abortController.signal }),\n      new Readable({ read() {}, signal: this.abortController.signal }),\n      new Readable({ read() {}, signal: this.abortController.signal }),\n      new Readable({ read() {}, signal: this.abortController.signal }),\n    ];\n    const addPromises = [];\n    for (const stream of streams) {\n      stream.push(Buffer.from('[['));\n    }\n    for await (const [namespaceWithKey, pair] of this.db.db.db.iterator({ gt: `${this.namespace}>`, lt: `${this.namespace}?`, keyAsBuffer: true, valueAsBuffer: true })) {\n      const key = namespaceWithKey.slice(namespaceLength);\n      const streamId = hash32(key) % 8;\n      const stream = streams[streamId];\n      if (!isAdded[streamId]) {\n        isAdded[streamId] = true;\n        addPromises.push(this.ipfs.add(stream, { wrapWithDirectory: false, recursive: false, pin: false, signal: this.abortController.signal }));\n      }\n      if (isFirstInsertion[streamId]) {\n        isFirstInsertion[streamId] = false;\n      } else {\n        stream.push(COMMA_BUFFER);\n      }\n      stream.push(OPEN_BUFFER);\n      stream.push(key);\n      stream.push(MID_BUFFER);\n      stream.push(pair);\n      stream.push(CLOSE_BUFFER);\n    }\n    for (const stream of streams) {\n      stream.push(Buffer.from('],['));\n    }\n    for await (const [namespaceWithId, key] of this.db.db.db.iterator({ gt: `${this.namespace}<`, lt: `${this.namespace}=`, keyAsBuffer: true, valueAsBuffer: true })) {\n      const id = namespaceWithId.slice(namespaceLength);\n      const streamId = hash32(key) % 8;\n      const stream = streams[streamId];\n      if (!isAdded[streamId]) {\n        isAdded[streamId] = true;\n        addPromises.push(this.ipfs.add(stream, { wrapWithDirectory: false, recursive: false, pin: false, signal: this.abortController.signal }));\n      }\n      if (isFirstDeletion[streamId]) {\n        isFirstDeletion[streamId] = false;\n      } else {\n        stream.push(COMMA_BUFFER);\n      }\n      stream.push(OPEN_BUFFER);\n      stream.push(id);\n      stream.push(MID_BUFFER);\n      stream.push(key);\n      stream.push(CLOSE_BUFFER);\n    }\n    for (const stream of streams) {\n      stream.push(Buffer.from(']]'));\n    }\n    for (const stream of streams) {\n      stream.push(null);\n    }\n    const hashes = (await Promise.all(addPromises)).map(({ cid }) => cid.toString());\n    this.ipfsHashes = hashes;\n    return hashes;\n  }\n\n\n  //  /**\n  //   * Stores and returns an IPFS hash of the current insertions and deletions\n  //   * @return {Promise<string>}\n  //   */\n  //  async getIpfsHashes():Promise<Array<string>> {\n  //    if (this.ipfsHashes) {\n  //      return this.ipfsHashes;\n  //    }\n  //    const start = Date.now();\n  //    const ipfsHashes = [];\n  //    for (let i = 0; i < 8; i += 1) {\n  //      const stream = new ReadableJsonDump(this.db.db.db, this.namespace, { buckets: 8, bucket: i });\n  //      const file = await this.ipfs.add(stream, { wrapWithDirectory: false, recursive: false, pin: false, signal: this.abortController.signal });\n  //      ipfsHashes.push(file.cid.toString());\n  //      if (!this.active) {\n  //        break;\n  //      }\n  //    }\n  //    console.log('DUMP', Date.now() - start, this.ipfsId);\n  //    console.log(ipfsHashes)\n  //    this.ipfsHashes = ipfsHashes;\n  //    return ipfsHashes;\n  //  }\n\n  /**\n   * Current number of IPFS pubsub peers.\n   * @return {number}\n   */\n  async ipfsPeerCount():Promise<number> {\n    const peerIds = await this.ipfs.pubsub.peers(this.topic, { signal: this.abortController.signal });\n    return peerIds.length;\n  }\n\n  /**\n   * Gracefully shutdown\n   * @return {void}\n   */\n  async shutdown(): Promise<void> {\n    this.active = false;\n    // Catch exceptions here as pubsub is sometimes closed by process kill signals.\n    if (this.ipfsId) {\n      try {\n        const unsubscribeAbortController = new AbortController();\n        const timeout = setTimeout(() => {\n          unsubscribeAbortController.abort();\n        }, 5000);\n        await this.ipfs.pubsub.unsubscribe(this.topic, this.boundHandleQueueMessage, { signal: unsubscribeAbortController.signal });\n        if (!this.disableSync) {\n          await this.ipfs.pubsub.unsubscribe(`${this.topic}:hash`, this.boundHandleHashMessage, { signal: unsubscribeAbortController.signal });\n        }\n        clearTimeout(timeout);\n      } catch (error) {\n        if (!notSubscribedRegex.test(error.message)) {\n          this.abortController.abort();\n          this.abortController = new AbortController();\n          throw error;\n        }\n      }\n    }\n    await this.hashLoadQueue.onIdle();\n    this.abortController.abort();\n    this.abortController = new AbortController();\n    await this.deserializeTransform.onIdle();\n    this.serializeTransform.destroy();\n    this.deserializeTransform.destroy();\n    await super.shutdown();\n  }\n\n  async handleQueueMessage(message:{from:string, data:Buffer}) {\n    if (message.from === this.ipfsId) {\n      return;\n    }\n    if (!this.active) {\n      return;\n    }\n    if (this.chunkPubSub) {\n      this.deserializeTransform.write(message.data);\n    } else {\n      try {\n        const queue = JSON.parse(Buffer.from(message.data).toString('utf8'));\n        await this.process(queue);\n      } catch (error) {\n        this.emit('error', error);\n      }\n    }\n  }\n\n  handleHashMessage(message:{from:string, data:Buffer}) {\n    if (!this.active) {\n      return;\n    }\n    if (message.from === this.ipfsId) {\n      return;\n    }\n    if (!this.peersCache.has(message.from)) {\n      this.hasNewPeers = true;\n      this.peersCache.set(message.from, true);\n    }\n    const remoteHash = Buffer.from(message.data).toString('utf8');\n    if (this.syncCache.has(remoteHash)) {\n      return;\n    }\n    this.syncCache.set(remoteHash, true);\n    try {\n      this.hashLoadQueue.add(() => this.loadIpfsHash(remoteHash));\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  async loadIpfsHash(hash:string) {\n    // $FlowFixMe\n    const stream = Readable.from(this.ipfs.cat(new CID(hash), { timeout: 120000 }));\n    const parser = jsonStreamParser();\n    const streamArray = jsonStreamArray();\n    const pipeline = stream.pipe(parser);\n    let arrayDepth = 0;\n    let streamState = 0;\n    let insertions = [];\n    let deletions = [];\n    streamArray.on('data', ({ value }) => {\n      if (streamState === 1) {\n        insertions.push(value);\n      } else if (streamState === 3) {\n        deletions.push(value);\n      }\n      if (insertions.length + deletions.length < 1000) {\n        return;\n      }\n      const i = insertions;\n      const d = deletions;\n      insertions = [];\n      deletions = [];\n      this.process([i, d], true);\n    });\n    try {\n      await new Promise((resolve, reject) => {\n        stream.on('error', (error) => {\n          reject(error);\n        });\n        streamArray.on('error', (error) => {\n          reject(error);\n        });\n        pipeline.on('error', (error) => {\n          reject(error);\n        });\n        pipeline.on('end', () => {\n          resolve();\n        });\n        pipeline.on('data', (data) => {\n          const { name } = data;\n          if (name === 'startArray') {\n            arrayDepth += 1;\n            if (arrayDepth === 2) {\n              streamState += 1;\n            }\n          }\n          if (streamState === 1 || streamState === 3) {\n            streamArray.write(data);\n          }\n          if (name === 'endArray') {\n            if (arrayDepth === 2) {\n              streamState += 1;\n            }\n            arrayDepth -= 1;\n          }\n        });\n      });\n    } catch (error) {\n      if (error.type !== 'aborted') {\n        this.emit('error', error);\n      }\n      return;\n    }\n    stream.destroy();\n    this.process([insertions, deletions]);\n    await this.processQueue.onIdle();\n  }\n}\n"],"file":"map.js"}